// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: todoQueries.sql

package db

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :one

INSERT INTO
    "todos" (id, title, description, status)
VALUES ($1, $2, $3, $4) RETURNING id, title, description, status, created_at, updated_at
`

type CreateTodoParams struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Status      bool   `json:"status"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todos, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Status,
	)
	var i Todos
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :one

DELETE FROM "todos" WHERE id = $1 RETURNING id, title, description, status, created_at, updated_at
`

func (q *Queries) DeleteTodo(ctx context.Context, id string) (Todos, error) {
	row := q.db.QueryRowContext(ctx, deleteTodo, id)
	var i Todos
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTodo = `-- name: GetTodo :one

SELECT id, title, description, status, created_at, updated_at FROM "todos" WHERE id = $1
`

func (q *Queries) GetTodo(ctx context.Context, id string) (Todos, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todos
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many

SELECT id, title, description, status, created_at, updated_at FROM "todos"
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todos, error) {
	rows, err := q.db.QueryContext(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todos
	for rows.Next() {
		var i Todos
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one

UPDATE "todos"
SET
    title = COALESCE($2, title),
    description = COALESCE(
        $3,
        description
    ),
    status = COALESCE($4, status),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 RETURNING id, title, description, status, created_at, updated_at
`

type UpdateTodoParams struct {
	ID          string         `json:"id"`
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
	Status      sql.NullBool   `json:"status"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todos, error) {
	row := q.db.QueryRowContext(ctx, updateTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Status,
	)
	var i Todos
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTodoStatus = `-- name: UpdateTodoStatus :one

UPDATE "todos" SET status = $2 WHERE id = $1 RETURNING id, title, description, status, created_at, updated_at
`

type UpdateTodoStatusParams struct {
	ID     string `json:"id"`
	Status bool   `json:"status"`
}

func (q *Queries) UpdateTodoStatus(ctx context.Context, arg UpdateTodoStatusParams) (Todos, error) {
	row := q.db.QueryRowContext(ctx, updateTodoStatus, arg.ID, arg.Status)
	var i Todos
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
